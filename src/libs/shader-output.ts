import { addPrefix } from '../utils';

export type FloatInput = [string, number];
export type ColorInput = [
  string,
  {
    r: number;
    g: number;
    b: number;
    a: number;
  }
];

export const generateShaderOutput = (data: any) => {
  if (!data) return null;

  const savedProperty = data?.['m_SavedProperties'];
  const floats: FloatInput[] = savedProperty?.['m_Floats'];
  const colors: ColorInput[] = savedProperty?.['m_Colors'];

  if (!savedProperty || !floats || !colors) return null;

  const findFloat = (key: string, prefix: boolean = true) => {
    const float = floats?.find((row) => row?.[0] === key)?.[1];
    return prefix ? addPrefix(float!) : float;
  };

  const findColor = (key: string, type: 'float3' | 'float4' = 'float4') => {
    const rgba = colors?.find((row) => row?.[0] === key)?.[1];
    if (!rgba) return;

    const output = Object.entries(rgba)
      .map((row) => {
        if (type === 'float3' && row[0] === 'a') return null;
        return addPrefix(row[1]);
      })
      .filter(Boolean);

    return `${type}(${output.join(', ')})`;
  };

  //   GENERAL
  const MATERIAL_ALPHA_USE = findFloat('_MainTexAlphaUse', false);
  const ALPHA_CUTOFF = findFloat('_MainTexAlphaCutoff');
  const BLUSH_STRENGTH = findFloat('_FaceBlushStrength');
  const BLUSH_COLOR = findColor('_FaceBlushColor');

  // NORMAL MAPPING
  const NORMAL_BUMP_SCALE = findFloat('_BumpScale');

  // DETAIL LINE
  const LINE_MULTIPLIER = findColor('_TextureLineMultiplier');
  const LINE_DISTANCE_CONTROL = findColor(
    '_TextureLineDistanceControl',
    'float3'
  );
  const LINE_SMOOTHNESS = findFloat('_TextureLineSmoothness');
  const LINE_THICKNESS = findFloat('_TextureLineThickness');

  // SHADOW
  const SHADOW_RAMP_WIDTH = findFloat('_ShadowRampWidth');
  const SHADOW_LIGHT_AREA = findFloat('_LightArea');
  const FACE_SHADOW_SOFTNESS = findFloat('_FaceMapSoftness');

  // MATERIAL
  const SPECULAR_COLOR = findColor('_SpecularColor');
  const SHADOW_WARM_COLOR_1 = findColor('_FirstShadowMultColor');
  const SHADOW_COOL_COLOR_1 = findColor('_CoolShadowMultColor');
  // specular color is shared by all materials
  const SPECULAR_MULTI_1 = findFloat('_SpecMulti');
  const SPECULAR_SHINE_1 = findFloat('_Shininess');
  const OUTLINE_WIDTH = findFloat('_OutlineWidth');
  const OUTLINE_COLOR_1 = findColor('_OutlineColor');

  const SHADOW_WARM_COLOR_2 = findColor('_FirstShadowMultColor2');
  const SHADOW_COOL_COLOR_2 = findColor('_CoolShadowMultColor2');
  const SPECULAR_MULTI_2 = findFloat('_SpecMulti2');
  const SPECULAR_SHINE_2 = findFloat('_Shininess2');
  const OUTLINE_COLOR_2 = findColor('_OutlineColor2');

  const SHADOW_WARM_COLOR_3 = findColor('_FirstShadowMultColor3');
  const SHADOW_COOL_COLOR_3 = findColor('_CoolShadowMultColor3');
  const SPECULAR_MULTI_3 = findFloat('_SpecMulti3');
  const SPECULAR_SHINE_3 = findFloat('_Shininess3');
  const OUTLINE_COLOR_3 = findColor('_OutlineColor3');

  const SHADOW_WARM_COLOR_4 = findColor('_FirstShadowMultColor4');
  const SHADOW_COOL_COLOR_4 = findColor('_CoolShadowMultColor4');
  const SPECULAR_MULTI_4 = findFloat('_SpecMulti4');
  const SPECULAR_SHINE_4 = findFloat('_Shininess4');
  const OUTLINE_COLOR_4 = findColor('_OutlineColor4');

  const SHADOW_WARM_COLOR_5 = findColor('_FirstShadowMultColor5');
  const SHADOW_COOL_COLOR_5 = findColor('_CoolShadowMultColor5');
  const SPECULAR_MULTI_5 = findFloat('_SpecMulti5');
  const SPECULAR_SHINE_5 = findFloat('_Shininess5');
  const OUTLINE_COLOR_5 = findColor('_OutlineColor5');

  // METAL
  const METAL_BRIGHTNESS = findFloat('_MTMapBrightness');
  const METAL_TILE = 'float2(1.0f, 1.0f)';
  const METAL_SHARP_OFFSET = findFloat('_MTSharpLayerOffset');
  const METAL_SHININESS = findFloat('_MTShininess');
  const METAL_SPECULAR_IN_SHADOW = findFloat('_MTSpecularAttenInShadow');
  const METAL_SPECULAR_SCALE = findFloat('_MTSpecularScale');
  const METAL_LIGHT = findColor('_MTMapLightColor');
  const METAL_DARK = findColor('_MTMapDarkColor');
  const METAL_SHARP_COLOR = findColor('_MTSharpLayerColor');
  const METAL_SPECULAR_COLOR = findColor('_MTSpecularColor');
  const METAL_SHADOW_COLOR = findColor('_MTShadowMultiColor');

  return `// ${data['m_Name']} (generated by TurN)
// https://github.com/Manashiku/MMDGenshin
// MMDGenshin v1.1.7
//====================//
//  MATERIAL GENERAL : 
//====================//
#define BACKFACE_USE_UV2 
#define MATERIAL_ALPHA_USE ${MATERIAL_ALPHA_USE} // 0 : none, 1 : AlphaTest, 2 : Emission, 3 : Blush
#define ALPHA_CUTOFF ${ALPHA_CUTOFF}   
#define BLUSH_COLOR ${BLUSH_COLOR}
#define BLUSH_STRENGTH ${BLUSH_STRENGTH}
#define BLUSH_SLIDER_NAME "mmd blush facial"
// this is the pmx morph slider that will control the blush so it is animatable 


//====================// 
//   NORMAL MAPPING:
//====================//
// #define USE_NORMAL_TEXTURE "normalmap" 
#define NORMAL_BUMP_SCALE ${NORMAL_BUMP_SCALE}
// #define DEBUG_VISUALIZE_NORMALS 
// #define DEBUG_VISUALIZE_NORMALS_B 
// this will work regardless of if the normal map is enabled      

//====================// 
//    DETAIL LINE:
//====================// 
#define USE_TEXTURE_LINE
// this will be disabled no matter what if the normal texture is disabled
#define LINE_MULTIPLIER       ${LINE_MULTIPLIER}
#define LINE_DISTANCE_CONTROL ${LINE_DISTANCE_CONTROL}
#define LINE_SMOOTHNESS       ${LINE_SMOOTHNESS}
#define LINE_THICKNESS        ${LINE_THICKNESS}
// #define DEBUG_VISUALIZE_LINES // test if the lines are rendering properly 

//====================//     
//      SHADOW : 
//====================//
#define USE_LIGHTMAP_AO 
#define USE_VERTEXCOLOR_AO 
#define USE_VERTEXCOLOR_RAMP_WIDTH   
#define USE_RAMP_TEXTURE  
#define SHADOW_RAMP_WIDTH ${SHADOW_RAMP_WIDTH}
#define SHADOW_LIGHT_AREA  ${SHADOW_LIGHT_AREA}
#define FACE_SHADOW_SOFTNESS ${FACE_SHADOW_SOFTNESS}
#define FACE_LIGHTMAP "sub/tex/facelightmap.png" // face map path
// #define USE_FACE_SHADOW_MAP
// #define DEBUG_VISUALIZE_SHADOW

//====================//
//    MATERIAL 1 : 
//====================//
#define COLOR_1 float4(1.0f, 1.0f, 1.0f, 1.0f)
#define SHADOW_WARM_COLOR_1 ${SHADOW_WARM_COLOR_1}
#define SHADOW_COOL_COLOR_1 ${SHADOW_COOL_COLOR_1}
#define USE_SPECULAR_MAT
#define SPECULAR_COLOR ${SPECULAR_COLOR}
// specular color is shared by all materials 
#define SPECULAR_MULTI_1 ${SPECULAR_MULTI_1}
#define SPECULAR_SHINE_1 ${SPECULAR_SHINE_1}
#define USE_OUTLINE 
#define OUTLINE_WIDTH ${OUTLINE_WIDTH}
#define OUTLINE_COLOR_1 ${OUTLINE_COLOR_1}

//====================//
//    MATERIAL 2 : 
//====================//
#define USE_MATERIAL_2
#define COLOR_2 float4(1.0f, 1.0f, 1.0f, 1.0f) 
#define SHADOW_WARM_COLOR_2 ${SHADOW_WARM_COLOR_2}
#define SHADOW_COOL_COLOR_2 ${SHADOW_COOL_COLOR_2}
#define SPECULAR_MULTI_2 ${SPECULAR_MULTI_2}
#define SPECULAR_SHINE_2 ${SPECULAR_SHINE_2}
#define OUTLINE_COLOR_2 ${OUTLINE_COLOR_2}

//====================//
//    MATERIAL 3 : 
//====================//
#define USE_MATERIAL_3
#define COLOR_3 float4(1.0f, 1.0f, 1.0f, 1.0f)
#define SHADOW_WARM_COLOR_3 ${SHADOW_WARM_COLOR_3}
#define SHADOW_COOL_COLOR_3 ${SHADOW_COOL_COLOR_3}
#define SPECULAR_MULTI_3 ${SPECULAR_MULTI_3}
#define SPECULAR_SHINE_3 ${SPECULAR_SHINE_3}
#define OUTLINE_COLOR_3 ${OUTLINE_COLOR_3}

//====================//
//    MATERIAL 4 : 
//====================// 
#define USE_MATERIAL_4
#define COLOR_4 float4(1.0f, 1.0f, 1.0f, 1.0f) 
#define SHADOW_WARM_COLOR_4 ${SHADOW_WARM_COLOR_4}
#define SHADOW_COOL_COLOR_4 ${SHADOW_COOL_COLOR_4} 
#define SPECULAR_MULTI_4 ${SPECULAR_MULTI_4}
#define SPECULAR_SHINE_4 ${SPECULAR_SHINE_4}
#define OUTLINE_COLOR_4 ${OUTLINE_COLOR_4}

//====================//
//    MATERIAL 5 : 
//====================//
#define USE_MATERIAL_5
#define COLOR_5 float4(1.0f, 1.0f, 1.0f, 1.0f) 
#define SHADOW_WARM_COLOR_5 ${SHADOW_WARM_COLOR_5}
#define SHADOW_COOL_COLOR_5 ${SHADOW_COOL_COLOR_5} 
#define SPECULAR_MULTI_5 ${SPECULAR_MULTI_5}
#define SPECULAR_SHINE_5 ${SPECULAR_SHINE_5}
#define OUTLINE_COLOR_5 ${OUTLINE_COLOR_5}

//====================//
//       METAL 
//====================//
// #define USE_METAL_MAT            "sub/tex/metalmap.png"
// #define USE_SPECULAR_RAMP        "sub/tex/specularramp.png"
#define METAL_BRIGHTNESS         ${METAL_BRIGHTNESS}
#define METAL_TILE               ${METAL_TILE} 
#define METAL_SHARP_OFFSET       ${METAL_SHARP_OFFSET}
#define METAL_SHININESS          ${METAL_SHININESS}
#define METAL_SPECULAR_IN_SHADOW ${METAL_SPECULAR_IN_SHADOW}
#define METAL_SPECULAR_SCALE     ${METAL_SPECULAR_SCALE}
#define METAL_LIGHT              ${METAL_LIGHT}
#define METAL_DARK               ${METAL_DARK}
#define METAL_SHARP_COLOR        ${METAL_SHARP_COLOR}
#define METAL_SPECULAR_COLOR     ${METAL_SPECULAR_COLOR}
#define METAL_SHADOW_COLOR       ${METAL_SHADOW_COLOR}
//============================================================================//
#include "shader.fxsub"
`;
};
